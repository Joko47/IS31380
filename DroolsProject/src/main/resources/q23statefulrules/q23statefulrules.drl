//created on: Oct 17, 2017
package q23rules

//list any import classes here.
import dtu.is31380.Sensor
import dtu.is31380.Actuator
import dtu.is31380.SystemConstants.DeviceType
import dtu.is31380.BuildingConfig
import dtu.is31380.RoomConfig
import dtu.is31380.HouseControllerInterface
import dtu.is31380.DoorConfig
import dtu.is31380.drools.VirtualRoom


//declare any global variables here



rule "build-standard"
    when
		b  : BuildingConfig()
		ds : Sensor(type == DeviceType.Door)
		r  : RoomConfig() from b.getRoomForSensor(ds.getName())
		
		not VirtualRoom( containedRooms contains r.name )
    then
    	String rc = r.toString();
    	String[] split=rc.split("\""); 
    	String[] temp = {r.getName()};
    	String[] tsens = {null};
    	String[] a = {null,null};
    	int ai = 0;
    	for(int i =0;i<split.length;i++){
    		if(split[i].startsWith("s_temp")){;
    		tsens[0] = split[i];
    		}
    		else if(split[i].startsWith("a_htr")){
    		a[ai] = split[i];
    		ai++;
    		}
    	}
    	if(a[1]==null){
    	String[] a2={a[0]};
    	a=a2;
    	}
    	double air = (r.getFloorArea()*r.getRoomHeight());
    	Double[] sp = {20.0};
    	insert(new VirtualRoom(temp,tsens,a,sp,air));  
    	System.out.println("Created a virtual room for: "+r.getName());     	
end

rule "post-standard"
    when
		vr : VirtualRoom()
		
    then
    	System.out.println("found VirtualRoom: "+vr);       	
end



rule "door-open"

    when
		b  : BuildingConfig()
		s  : Sensor(type == DeviceType.Door, value == 1)
		r1 : RoomConfig() from b.getRoomForSensor(s.getName())
		rd : DoorConfig() from r1.getDoors()
		r2 : RoomConfig(name != r1.name) from rd.getLinkedSpaces()
		vr : VirtualRoom( containedRooms contains r2.name )
		vr2: VirtualRoom( containedRooms contains r1.name, containedRooms not contains r2.name )
    then
       	//System.out.println(""+r1.getName());
       	System.out.println(""+rd.getName()+" in "+r1.getName()+" is open connecting to " + r2.getName());
		//System.out.println("Air area is now: "+(((r1.getFloorArea())*(r1.getRoomHeight()))+(r2.getFloorArea())*(r2.getRoomHeight())));
       	//System.out.println(""+java.util.Arrays.toString(Rooms)+" "+r1.getName()+" "+r2.getName());
       	//System.out.println(""+java.util.Arrays.toString(vr2.getContainedRooms()));
       	String[] rooms=new String[(vr.getContainedRooms().length+vr2.getContainedRooms().length)];
       	String[] tsens=new String[(vr.getContainedSensors().length+vr2.getContainedSensors().length)];
       	String[] a=new String[(vr.getContainedActuators().length+vr2.getContainedActuators().length)];
       	Double[] sp=new Double[(vr.getContainedSetpoints().length+vr2.getContainedSetpoints().length)];
       	double air =0.0; 
       	for(int i=0; i<(vr.getContainedRooms().length);i++){
       		rooms[i]=vr.getContainedRooms()[i];
       		tsens[i]=vr.getContainedSensors()[i];
       		sp[i]=vr.getContainedSetpoints()[i]; 	
       	}
       	air+=vr.getContainedAir();
       	for(int i=0; i<(vr2.getContainedRooms().length);i++){
       		rooms[(i+vr.getContainedRooms().length)]=vr2.getContainedRooms()[i];
       		tsens[(i+vr.getContainedRooms().length)]=vr2.getContainedSensors()[i];
       		sp[(i+vr.getContainedRooms().length)]=vr2.getContainedSetpoints()[i];
       	}
       	for(int i=0;i<vr.getContainedActuators().length;i++){
       		a[i]=vr.getContainedActuators()[i];
       	}
       	for(int i=0;i<vr2.getContainedActuators().length;i++){
       		a[(i+vr.getContainedActuators().length)]=vr2.getContainedActuators()[i];
       	}
       	
       	air+=vr2.getContainedAir();
       	delete(vr2);
       	delete(vr);
       	insert(new VirtualRoom(rooms,tsens,a,sp,air)); 	
end

rule "door-closed"
    when
		b  : BuildingConfig()
		s  : Sensor(type == DeviceType.Door, value == 0)
		r1 : RoomConfig() from b.getRoomForSensor(s.getName())
		rd : DoorConfig() from r1.getDoors()
		r2 : RoomConfig(name != r1.name) from rd.getLinkedSpaces()
		vr : VirtualRoom( containedRooms contains r1.name, containedRooms contains r2.name )
    then
       	//System.out.println(""+r1.getName());
       	System.out.println(""+rd.getName()+" in "+r1.getName()+" is closed disconnecting " + r2.getName());
		//System.out.println("Air area is now: "+(((r1.getFloorArea())*(r1.getRoomHeight()))+(r2.getFloorArea())*(r2.getRoomHeight())));
       	//System.out.println(""+java.util.Arrays.toString(Rooms)+" "+r1.getName()+" "+r2.getName());
       	//System.out.println(""+java.util.Arrays.toString(vr2.getContainedRooms()));
       	String[] rooms=new String[(vr.getContainedRooms().length-1)];
       	String[] tsens = new String[(vr.getContainedSensors().length-1)];
       	Double[] sp = new Double[(vr.getContainedSetpoints().length-1)];
       	String rc = r1.toString();
    	String[] split=rc.split("\"");
    	String[] a = {null,null};
    	int ai = 0;
    	for(int i =0;i<split.length;i++){
    		if(split[i].startsWith("a_htr")){
    		a[ai] = split[i];
    		ai++;
    		}
    	}
    	if(a[1]==null){
    	String[] a2={a[0]};
    	a=a2;
    	}
    	double air = (r1.getFloorArea()*r1.getRoomHeight());
       	int t=0;
       	for(int i=0; i<vr.getContainedRooms().length;i++){
       		if(vr.getContainedRooms()[i]!=r1.getName()){
       			rooms[i-t]=vr.getContainedRooms()[i];
       			tsens[i-t]=vr.getContainedSensors()[i];
       			sp[i-t]=vr.getContainedSetpoints()[i];
       		}
       		else{
       			t++;
       		}
       	}
       	
       	double vrAir = vr.getContainedAir();
       	vrAir -= air;
       	
       	t=0;
       	String[] act = new String[(vr.getContainedActuators().length-a.length)];
       	for(int i=0;i<vr.getContainedActuators().length;i++){
       		if(a.length==2){
       			if(vr.getContainedActuators()[i].equals(a[0])||vr.getContainedActuators()[i].equals(a[1])){
       			t++;
       			}
       			else if(vr.getContainedActuators()[i].equals(a[0])){
       			t++;
       			}
       			else{
       			act[i-t]=vr.getContainedActuators()[i];
       			}
       		}
       		if(a.length==1){
       			if(vr.getContainedActuators()[i].equals(a[0])){
       			t++;
       			}
       			else{
       			act[i-t]=vr.getContainedActuators()[i];
       			}
       		}
       		System.out.println(java.util.Arrays.toString(act));
       	}
       	insert(new VirtualRoom(rooms,tsens,act,sp,vrAir));
       	delete(vr);
end