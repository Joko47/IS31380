//created on: Sep 10, 2017
package dtu.is31380.drools

//list any import classes here.
import dtu.is31380.Sensor
import dtu.is31380.Actuator
import dtu.is31380.SystemConstants.DeviceType
import dtu.is31380.BuildingConfig
import dtu.is31380.RoomConfig
import dtu.is31380.HouseControllerInterface
import dtu.is31380.DoorConfig



//declare any global variables here

/*
function extractBaseType(String name) {
    //function content (can have multiple functions) 
    return name.substring(0, 1);
}
*/


rule "watch-temp"
    when
        //conditions
       s : Sensor(type == DeviceType.Temperature) //value = $val
       intf : HouseControllerInterface()
       // : s.value        
    then
        //actions
    	 System.out.println(intf.getSimulationTime().toString()+ ": Current temperature of "+s.getName()+" is "+s.getValue().toString()+" degrees");
       
end


rule "watch-act"
    when
        //conditions
       a : Actuator( type == DeviceType.PowerControlledHeater) 
       intf : HouseControllerInterface()
    then
        //actions
    	 System.out.println(intf.getSimulationTime().toString()+ " : Actuator "+a.getName()+" has setpoint: "+a.getSetpoint().toString()+" .");       
end

rule "turn-on"
    when
        //conditions
       b : BuildingConfig()
       s : Sensor(type == DeviceType.Temperature, value < 21)      
       $rs : RoomConfig() from b.getRoomForSensor(s.getName())
       a : Actuator( type == DeviceType.PowerControlledHeater, value != 1.0) 
       ra : RoomConfig( name == $rs.name) from b.getRoomForActuator(a.getName())
       intf : HouseControllerInterface()
    then
        //actions
    	System.out.println(intf.getSimulationTime().toString()+ " : Turning on  "+a.getName()+" as "+s.getName()+" in room "+ra.getRoomName()+" is below degrees");       
		intf.setActuator(a.getName(),1.0);
end


rule "turn-off"
    when
        //conditions
       b : BuildingConfig()
       s : Sensor(type == DeviceType.Temperature, value > 22)	    
       $rs : RoomConfig() from b.getRoomForSensor(s.getName())
       a : Actuator( type == DeviceType.PowerControlledHeater, value != 0.0) 
       ra : RoomConfig( name == $rs.name) from b.getRoomForActuator(a.getName())
       intf : HouseControllerInterface()
    then
        //actions
    	 System.out.println(intf.getSimulationTime().toString()+ " : Turning off  "+a.getName()+" as "+s.getName()+" in room "+ra.getRoomName()+" is above 22 degrees");       
		intf.setActuator(a.getName(),0.0);
end

rule "check-door"
	when
		b : BuildingConfig()
		s : Sensor(type == DeviceType.Door, value == 1)
		r1 : RoomConfig() from b.getRoomForSensor(s.getName())
		rd : DoorConfig() from r1.getDoors()
		r2 : RoomConfig(name != r1.name) from rd.getLinkedSpaces()
		
	then
		System.out.println(""+rd.getName()+" in "+r1.getName()+" is open connecting to " + r2.getName());
		System.out.println("Air area is now: "+(((r1.getFloorArea())*(r1.getRoomHeight()))+(r2.getFloorArea())*(r2.getRoomHeight())));
		
end

rule "check-roomCollection"
	when
		b : BuildingConfig()
		s : Sensor(type == DeviceType.Door, value == 1)
		
	then
		
end
	

/*

Lav object til sammenkoblede rum
opret samlet rum, når dør åbner
benyt rum, hvis dør er åben
slet rum når dør lukker
benyt normale rum

*/
rule "virt-room"
	when
		b : BuildingConfig()
		s : Sensor(type == DeviceType.Door, value == 1)
		r1 : RoomConfig() from b.getRoomForSensor(s.getName())
		rd : DoorConfig() from r1.getDoors()
		r2 : RoomConfig(name != r1.name) from rd.getLinkedSpaces()
	then
		
		
end


/*
rule "check-floor-area2"
when
	b : BuildingConfig()
	a : Actuator( type == DeviceType.PowerControlledHeater) 
	a2 : Actuator( type == DeviceType.PowerControlledHeater, this != a) 
	ra : RoomConfig( $area : innerWallArea, rname : name) from b.getRoomForActuator(a.getName())
	ra2 : RoomConfig( rname == name) from b.getRoomForActuator(a2.getName())	
then
 	System.out.println(rname+" InnerWallArea: " +  ra.getFloorArea());      
end	
*/
/*
rule "check-air-area2"
    when
       	b : BuildingConfig()
		a : Actuator( type == DeviceType.PowerControlledHeater) 
		a2 : Actuator( type == DeviceType.PowerControlledHeater, this != a) 
		ra : RoomConfig( $area : innerWallArea, rname : name) from b.getRoomForActuator(a.getName())
		ra2 : RoomConfig( rname == name) from b.getRoomForActuator(a2.getName())	
    then
        System.out.println(rname+" AirVolume: " +  (ra.getFloorArea()*(ra.getRoomHeight())));

end
*/

/*
rule "Door-open"
    when
       	b : BuildingConfig()
      	
      	a : Actuator( type == DeviceType.PowerControlledHeater) 
		a2 : Actuator( type == DeviceType.PowerControlledHeater, this != a) 
		ra : RoomConfig( $area : innerWallArea, rname : name) from b.getRoomForActuator(a.getName())
		ra2 : RoomConfig( rname == name) from b.getRoomForActuator(a2.getName())	
		
    then
        System.out.println(rname+" AirVolume: " +  (ra.getFloorArea()*(ra.getRoomHeight())));

end
*/

/*
rule "Your Second Rule"
    //include attributes such as "salience" here...
    when
        //conditions
       s :  
       a : Actuator( type == DeviceType.PowerControlledHeater , value == 0.0) //value = $val
    then
        //actions

end
*/
